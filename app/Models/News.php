<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Storage; // Th√™m use Storage

class News extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'news';
    protected $primaryKey = 'id';
    public $timestamps = true;

    protected $fillable = [
        'title',
        'content',
        'pdf_file',
        'cover_image',
        'category',
        'created_by',
        'updated_by',
        'deleted_by',
    ];

    // C√°c tr∆∞·ªùng ƒë∆∞·ª£c t√≠nh to√°n v√† n·ªëi v√†o JSON/Array
    protected $appends = [
        'pdf_url',
        'cover_image_url',
        'images_urls',
        // Kh√¥ng c·∫ßn append t√™n ng∆∞·ªùi t·∫°o/c·∫≠p nh·∫≠t v√¨ ƒë√£ load qua relationship
        // 'created_by_name',
        // 'updated_by_name',
    ];

    /* ===========================================================
     |                   QUAN H·ªÜ (RELATIONSHIPS)
     =========================================================== */

    /**
     * üîπ Ng∆∞·ªùi t·∫°o tin
     */
    public function nguoiTao()
    {
        // ƒê·∫£m b·∫£o select c·∫£ ID_VAITRO ƒë·ªÉ c√≥ th·ªÉ load relationship 'vaitro'
        return $this->belongsTo(Nguoidung::class, 'created_by', 'ID_NGUOIDUNG')
            ->select('ID_NGUOIDUNG', 'HODEM_VA_TEN', 'ID_VAITRO');
    }

    /**
     * üîπ Ng∆∞·ªùi c·∫≠p nh·∫≠t tin
     */
    public function nguoiCapNhat()
    {
        // ƒê·∫£m b·∫£o select c·∫£ ID_VAITRO
        return $this->belongsTo(Nguoidung::class, 'updated_by', 'ID_NGUOIDUNG')
            ->select('ID_NGUOIDUNG', 'HODEM_VA_TEN', 'ID_VAITRO');
    }

    /**
     * üîπ Ng∆∞·ªùi x√≥a tin
     */
    public function nguoiXoa()
    {
        return $this->belongsTo(Nguoidung::class, 'deleted_by', 'ID_NGUOIDUNG')
            ->select('ID_NGUOIDUNG', 'HODEM_VA_TEN');
    }

    /**
     * üîπ Danh s√°ch ·∫£nh ph·ª•
     */
    public function images()
    {
        return $this->hasMany(NewsImage::class, 'news_id', 'id');
    }

    /* ===========================================================
     |                   ACCESSORS (GETTERS)
     =========================================================== */

    /**
     * ‚úÖ URL ƒë·∫ßy ƒë·ªß c·ªßa file PDF
     */
    public function getPdfUrlAttribute(): ?string
    {
        // Tr·∫£ v·ªÅ URL ƒë·∫ßy ƒë·ªß n·∫øu pdf_file t·ªìn t·∫°i v√† file th·ª±c s·ª± c√≥ tr√™n disk 'public'
        return ($this->pdf_file && Storage::disk('public')->exists($this->pdf_file))
            ? Storage::disk('public')->url($this->pdf_file)
            : null;
    }

    /**
     * ‚úÖ URL ƒë·∫ßy ƒë·ªß c·ªßa ·∫£nh b√¨a
     */
    public function getCoverImageUrlAttribute(): ?string
    {
        // Tr·∫£ v·ªÅ URL ƒë·∫ßy ƒë·ªß n·∫øu cover_image t·ªìn t·∫°i v√† file th·ª±c s·ª± c√≥ tr√™n disk 'public'
        return ($this->cover_image && Storage::disk('public')->exists($this->cover_image))
            ? Storage::disk('public')->url($this->cover_image)
            : null;
    }

    /**
     * ‚úÖ M·∫£ng URL ƒë·∫ßy ƒë·ªß c·ªßa danh s√°ch ·∫£nh li√™n quan
     */
    public function getImagesUrlsAttribute(): array
    {
        // Load relationship 'images' n·∫øu ch∆∞a c√≥ ƒë·ªÉ ƒë·∫£m b·∫£o $this->images t·ªìn t·∫°i
        $this->loadMissing('images');

        // Map qua collection 'images' (n·∫øu c√≥) v√† t·∫°o URL ƒë·∫ßy ƒë·ªß cho m·ªói ·∫£nh
        return $this->images
            ? $this->images->map(function($img) {
                // Ch·ªâ tr·∫£ v·ªÅ URL n·∫øu file t·ªìn t·∫°i
                return ($img->filename && Storage::disk('public')->exists($img->filename))
                    ? Storage::disk('public')->url($img->filename)
                    : null;
            })->filter()->values()->toArray() // L·ªçc b·ªè c√°c gi√° tr·ªã null v√† reset keys
            : [];
    }
}