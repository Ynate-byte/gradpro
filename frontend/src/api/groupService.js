import axiosClient from './axiosConfig'

/**
 * üß© Nh√≥m API cho ch·ª©c nƒÉng Qu·∫£n l√Ω Nh√≥m (Group Management)
 */

/* ------------------------------------------------------------
 * 1Ô∏è‚É£ Nh√≥m hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
 * ------------------------------------------------------------ */
export const getMyGroup = async (params) => {
  const { data } = await axiosClient.get('/nhom/my-group', { params })
  return data
}

/* ------------------------------------------------------------
 * 2Ô∏è‚É£ C√°c k·∫ø ho·∫°ch ho·∫°t ƒë·ªông m√† sinh vi√™n tham gia
 * ------------------------------------------------------------ */
export const getMyActivePlans = async () => {
  const { data } = await axiosClient.get('/student/my-active-plans')
  return data
}

/* ------------------------------------------------------------
 * 3Ô∏è‚É£ Danh s√°ch l·ªùi m·ªùi ƒëang ch·ªù x·ª≠ l√Ω
 * ------------------------------------------------------------ */
export const getPendingInvitations = async (params) => {
  const { data } = await axiosClient.get('/invitations', { params })
  return data
}

/* ------------------------------------------------------------
 * 4Ô∏è‚É£ T·∫°o nh√≥m m·ªõi
 * ------------------------------------------------------------ */
export const createGroup = async (groupData, planId) => {
  const payload = { ...groupData, ID_KEHOACH: planId }
  const { data } = await axiosClient.post('/nhom', payload)
  return data
}

/* ------------------------------------------------------------
 * 5Ô∏è‚É£ M·ªùi th√†nh vi√™n v√†o nh√≥m
 * ------------------------------------------------------------ */
export const inviteMember = async (groupId, invitationData) => {
  const { data } = await axiosClient.post(`/nhom/${groupId}/invite`, invitationData)
  return data
}

/* ------------------------------------------------------------
 * 6Ô∏è‚É£ X·ª≠ l√Ω l·ªùi m·ªùi (ch·∫•p nh·∫≠n / t·ª´ ch·ªëi)
 * ------------------------------------------------------------ */
export const handleInvitation = async (invitationId, action) => {
  const { data } = await axiosClient.post(`/invitations/${invitationId}/handle`, { action })
  return data
}

/* ------------------------------------------------------------
 * 7Ô∏è‚É£ T√¨m ki·∫øm nh√≥m ƒëang m·ªü trong m·ªôt k·∫ø ho·∫°ch
 * ------------------------------------------------------------ */
export const findGroups = async (params, planId) => {
  const allParams = { ...params, ID_KEHOACH: planId }
  const { data } = await axiosClient.get('/nhom/find', { params: allParams })
  return data
}

/* ------------------------------------------------------------
 * 8Ô∏è‚É£ G·ª≠i y√™u c·∫ßu xin tham gia nh√≥m
 * ------------------------------------------------------------ */
export const requestToJoin = async (groupId, data) => {
  const { data: result } = await axiosClient.post(`/nhom/${groupId}/request-join`, data)
  return result
}

/* ------------------------------------------------------------
 * 9Ô∏è‚É£ X·ª≠ l√Ω y√™u c·∫ßu xin tham gia (ch·∫•p nh·∫≠n / t·ª´ ch·ªëi)
 * ------------------------------------------------------------ */
export const handleJoinRequest = async (groupId, requestId, action) => {
  const { data } = await axiosClient.post(`/nhom/${groupId}/requests/${requestId}/handle`, { action })
  return data
}

/* ------------------------------------------------------------
 * üîü R·ªùi kh·ªèi nh√≥m
 * ------------------------------------------------------------ */
export const leaveGroup = async (planId) => {
  const { data } = await axiosClient.post('/nhom/leave', { plan_id: planId })
  return data
}

/* ------------------------------------------------------------
 * 1Ô∏è‚É£1Ô∏è‚É£ Chuy·ªÉn quy·ªÅn tr∆∞·ªüng nh√≥m
 * ------------------------------------------------------------ */
export const transferGroupLeadership = async (groupId, newLeaderId) => {
  const { data } = await axiosClient.post(`/nhom/${groupId}/transfer-leadership/${newLeaderId}`)
  return data
}

/* ------------------------------------------------------------
 * 1Ô∏è‚É£2Ô∏è‚É£ H·ªßy y√™u c·∫ßu tham gia (do sinh vi√™n g·ª≠i)
 * ------------------------------------------------------------ */
export const cancelJoinRequest = async (requestId) => {
  const { data } = await axiosClient.post(`/requests/${requestId}/cancel`)
  return data
}

/* ------------------------------------------------------------
 * 1Ô∏è‚É£3Ô∏è‚É£ H·ªßy l·ªùi m·ªùi (do nh√≥m tr∆∞·ªüng g·ª≠i)
 * ------------------------------------------------------------ */
export const cancelInvitation = async (groupId, invitationId) => {
  const { data } = await axiosClient.post(`/nhom/${groupId}/invitations/${invitationId}/cancel`)
  return data
}

/* ----- üöÄ B·∫ÆT ƒê·∫¶U API N·ªòP S·∫¢N PH·∫®M üöÄ ----- */

/**
 * 1Ô∏è‚É£4Ô∏è‚É£ L·∫•y l·ªãch s·ª≠ c√°c l·∫ßn n·ªôp s·∫£n ph·∫©m c·ªßa nh√≥m.
 * @param {number} phancongId - ID c·ªßa PHANCONG_DETAI_NHOM
 * @returns {Promise<Array>} Danh s√°ch c√°c l·∫ßn n·ªôp.
 */
export const getSubmissions = async (phancongId) => {
    const { data } = await axiosClient.get(`/nhom/submissions/${phancongId}`);
    return data;
};

/**
 * 1Ô∏è‚É£5Ô∏è‚É£ N·ªôp s·∫£n ph·∫©m (b√°o c√°o, source code, links).
 * @param {number} phancongId - ID c·ªßa PHANCONG_DETAI_NHOM
 * @param {FormData} formData - D·ªØ li·ªáu form ch·ª©a file v√† links.
 * @returns {Promise<object>} K·∫øt qu·∫£ n·ªôp.
 */
export const submitProduct = async (phancongId, formData) => {
    const { data } = await axiosClient.post(`/nhom/submissions/${phancongId}`, formData, {
        headers: {
            'Content-Type': 'multipart/form-data',
        },
    });
    return data;
};

export const searchAvailableStudents = async (planId, params) => {
  const { data } = await axiosClient.get(`/nhom/plan/${planId}/available-students`, { params });
  return data;
}

/* ------------------------------------------------------------
 * 1Ô∏è‚É£7Ô∏è‚É£ [M·ªöI] M·ªùi nhi·ªÅu th√†nh vi√™n
 * ------------------------------------------------------------ */
export const inviteMultipleMembers = async (groupId, userIds, message) => {
  const { data } = await axiosClient.post(`/nhom/${groupId}/invite-multiple`, {
    user_ids: userIds,
    LOINHAN: message
  });
  return data;
}